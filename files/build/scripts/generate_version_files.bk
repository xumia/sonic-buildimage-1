#!/bin/bash

BUILDINFO_PATH="/usr/local/share/buildinfo"
INIT_VERSIONS_PATH="${BUILDINFO_PATH}/init-versions"
DEFAULT_VERSIONS_PATH="${BUILDINFO_PATH}/versions"
BASE_VERSION_PATH="${BUILDINFO_PATH}/base-versions"
APT_PREFERENCES_PATH="/etc/apt/preferences.d/"
PIP_PRIORITY="999"
SCRIPT_PATH=$(dirname "$0")

# Generate the base versions file, it will merge the versions of the override packages
generate_base_versions_file()
{
    local versions_filename=$1
    local default_versions_file="${DEFAULT_VERSIONS_PATH}/${versions_filename}"
    local base_versions_file="${BASE_VERSION_PATH}/${versions_filename}"
    local version_file="${BUILDINFO_PATH}/${versions_filename}"
    [ ! -f "${base_versions_file}" ] && [ -f "${default_versions_file}" ] && cp "${default_versions_file}" "${base_versions_file}"
    
    # If the base versions file does not exist, use the versions file as the base versions file
    if [ ! -f "${base_versions_file}" ]; then
        if [ -f "${version_file}" ]; then
            cp "${version_file}" "${base_versions_file}"
        else
            touch "${base_versions_file}"
        fi
        return
    fi
    
    # The base versions file exists, merge together with the versions file
    declare -A packages
    while IFS= read -r line
    do
        package=$(echo $line | cut -d= -f1)
        verson=$(echo $line | cut -d= -f2)
        packages[$package]=$version
    done < ${version_file}
    
    local temp_file=$(mktemp)
    declare -A override_packages
    while IFS= read -r line
    do
        package=$(echo $line | cut -d= -f1)
        verson=$(echo $line | cut -d= -f2)
        override_version="${packages[$package]}"
        if [ ! -z "${override_version}" ]; then
            verson="${override_version}"
            override_packages[$package]="${override_version}"
        fi
        echo "${package}=${verson}" >> $temp_file
    done < ${base_versions_file}
    
    for package in "${package[@]}" ; do
        version="${override_packages[$package]}"
        if [ -z "$version" ]; then
            echo "${package}=${verson}" >> $temp_file
        fi
    done
    
    sort "${temp_file}" > "${base_versions_file}"
    rm -f "${temp_file}"
}

# Generate the debian package version preferences
generate_debian_versions()
{
    local versions_filename="$1"
    local versions_preferences="${APT_PREFERENCE_PATH}/${versions_filename}"
    generate_base_versions_file "${versions_filename}"
    [ -f "${versions_preferences}" ] && rm -f "${versions_preferences}"
    while IFS= read -r line
    do
        package=$(echo $line | cut -d= -f1)
        verson=$(echo $line | cut -d= -f2)
        echo "Package: $package" >> "${versions_preferences}"
        echo "Pin: version $verson" >> "${versions_preferences}"
        echo "Pin-Priority: $PIP_PRIORITY" >> "${versions_preferences}"
    done < "${BASE_VERSION_PATH}/${versions_filename}"
}

# Generate the initial package versions
generate_init_versions()
{
    if ! command -v apt &> /dev/null; then
        apt list --installed | sed "1d" | awk '{gsub("/.*", "", $1); print $1"="$2}' > "${INIT_VERSIONS_PATH}/versions-deb"
    fi

    if ! command -v pip &> /dev/null; then
        pip freeze > "${INIT_VERSIONS_PATH}/versions-pip"
    fi

    if ! command -v pip3 &> /dev/null; then
        pip3 freeze > "${INIT_VERSIONS_PATH}/versions-pip3"
    fi
}

generate_init_versions
generate_debian_versions "versions-deb"
generate_base_versions_file "versions-pip"
generate_base_versions_file "versions-pip3"


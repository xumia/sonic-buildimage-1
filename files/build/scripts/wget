#!/bin/bash

SHOW_VERSION=y
BUILDINFO_PATH="/usr/local/share/buildinfo"
VERSION_FILE="${BUILDINFO_PATH}/versions/versions-web"
LOG_PATH="${BUILDINFO_PATH}/diff-versions"
[ -d "/sonic/target" ] && LOG_PATH="/sonic/target/versions/build"
VERSOIN_LOG_FILE="${LOG_PATH}/versions-web"
[ -z $REAL_COMMAND ] && REAL_COMMAND=/usr/bin/wget
. $BUILDINFO_PATH/config/buildinfo.config
URL_PREFIX=$(echo "${PACKAGE_URL_PREFIX}" | sed -E "s#(//[^/]*/).*#\1#")
PARAS=("$@")
ORG_PARAS="$@"
[ ! -d $LOG_PATH ] && mkdir -p $LOG_PATH
log_err()
{
    echo "$1" >> $LOG_PATH/error.log
    echo "$1" 1>&2
}

get_version()
{
    local package_url=$1
    /usr/bin/wget -qO - "$package_url" | md5sum | cut -d' ' -f1
}

get_weburl_index()
{
    for (( i=0; i<${#PARAS[@]}; i++ ))
    do
        local para=${PARAS[$i]}
        if [[ "$para" == *://* ]]; then
            echo $i
            return
        fi
    done
}

process()
{
    local index=$(get_weburl_index)

    if [ -z "$index" ]; then
        log_err "Failed to parse the url"
        return 1
    fi
    local package_url=${PARAS[$index]}
    local version=""
    [ -f $VERSION_FILE ] && version=$(grep "^${package_url}=" $VERSION_FILE | awk -F"==" '{print $NF}')

    if [ ! -z "$version" ]; then
        local filename=$(echo $package_url | awk -F"/" '{print $NF}' | cut -d? -f1 | cut -d# -f1)
        local version_filename="${filename}-${version}"
        PARAS[$index]="${PACKAGE_URL_PREFIX}${version_filename}"

        # Try to download package from the proxy
        ${REAL_COMMAND} ${PARAS[@]}
        result=$?
        if [ $result -eq 0 ]; then
            [ -f "$version_filename" ] && mv -f "${version_filename}" "${filename}"
            return $result
        fi

        local real_version=$(get_version "$package_url")
        if [ "$SONIC_ENFORCE_VERSIONS" == "y" ] && [ "$version" != "$real_version" ]; then
            return 1
        fi
    elif [ "$SONIC_ENFORCE_VERSIONS" == "y" ]; then
        return 1
    fi

    local real_version=$(get_version "$package_url")
    mkdir -p $LOG_PATH > /dev/null 2>&1
    echo "$package_url==$real_version" >> ${VERSOIN_LOG_FILE}

    # If the version is mismatched, exit the wget/curl
    if [ "$SONIC_ENFORCE_VERSIONS" == "y" ] && [ "$version" != "$real_version" ]; then
        return 1
    fi

    ${REAL_COMMAND} "$@"
}


process "$@"

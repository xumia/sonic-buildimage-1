#!/bin/bash

. /usr/local/share/buildinfo/config/buildinfo.config
COMPONENT=web
VERSION_FILE=$VERSION_PATH/versions-web
BUILD_VERSION_FILE=$BUILD_VERSION_PATH/versions-web
ENABLE_VERSION_CONTROL=$(check_version_control "$COMPONENT")

[ -z $REAL_COMMAND ] && REAL_COMMAND=/usr/bin/wget
PARAS=("$@")

if [ "$SKIP_BUILD_HOOK" == "y" ]; then
    $REAL_COMMAND "$@"
    return $?
fi

get_version()
{
    local package_url=$1
    if [[ "$REAL_COMMAND" == */curl ]]; then
        $REAL_COMMAND "$package_url" | md5sum | cut -d' ' -f1
    else
        $REAL_COMMAND -qO - "$package_url" | md5sum | cut -d' ' -f1
    fi
}

get_weburl_index()
{
    for (( i=0; i<${#PARAS[@]}; i++ ))
    do
        local para=${PARAS[$i]}
        if [[ "$para" == *://* ]]; then
            echo $i
            return
        fi
    done
}

check_if_file_exist()
{
    if [[ "$REAL_COMMAND" == */curl ]]; then
        $REAL_COMMAND --output /dev/null --silent --head --fail "$1" > /dev/null 2>&1
    else
        $REAL_COMMAND -S --spider $1 2>&1 | grep -q "200 OK"
    fi
}

process()
{
    local index=$(get_weburl_index)

    if [ -z "$index" ]; then
        log_err "Failed to parse the url"
        return 1
    fi
    local package_url=${PARAS[$index]}
    local version=""
    local real_version=""
    [ -f $VERSION_FILE ] && version=$(grep "^${package_url}=" $VERSION_FILE | awk -F"==" '{print $NF}')

    if [ ! -z "$version" ]; then
        local filename=$(echo $package_url | awk -F"/" '{print $NF}' | cut -d? -f1 | cut -d# -f1)
        local version_filename="${filename}-${version}"
        local url="${PACKAGE_URL_PREFIX}${version_filename}"
        PARAS[$index]=$url

        # Try to download package from the proxy
        if check_if_file_exist $url; then
            ${REAL_COMMAND} ${PARAS[@]}
            local result=$?
            [ -f "$version_filename" ] && mv -f "${version_filename}" "${filename}"
            return $result
        fi

        real_version=$(get_version "$package_url")
        if [ "$ENABLE_VERSION_CONTROL" == "y" ] && [ "$version" != "$real_version" ]; then
            return 1
        fi
    elif [ "$ENABLE_VERSION_CONTROL" == "y" ]; then
        return 1
    fi

    [ -z "$real_version" ] && real_version=$(get_version "$package_url")
    mkdir -p $LOG_PATH > /dev/null 2>&1
    echo "$package_url==$real_version" >> ${BUILD_VERSION_FILE}

    # If the version is mismatched, exit the wget/curl
    if [ "$ENABLE_VERSION_CONTROL" == "y" ] && [ "$version" != "$real_version" ]; then
        return 1
    fi

    ${REAL_COMMAND} "$@"
}


process "$@"

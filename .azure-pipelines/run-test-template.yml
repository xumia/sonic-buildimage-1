parameters:
- name: dut
  type: string
- name: tbname
  type: string
- name: tbtype
  type: string
- name: ptf_name
  type: string

steps:
- checkout: self
  clean: true
  displayName: 'checkout sonic-mgmt repo'

- task: DownloadPipelineArtifact@2
  inputs:
    artifact: sonic-buildimage.vs
  displayName: "Download sonic-buildimage.vs artifact"

- script: |
    set -x
    sudo mkdir -p /data/sonic-vm/images
    sudo cp -v ../target/sonic-vs.img.gz /data/sonic-vm/images/sonic-vs.img.gz
    sudo gzip -fd /data/sonic-vm/images/sonic-vs.img.gz
    username=$(id -un)
    sudo chown -R $username.$username /data/sonic-vm

    echo "Test PR"
    pushd /data/sonic-mgmt
    git remote update
    git reset --hard origin/master
    sed -i s/use_own_value/${username}/ ansible/veos_vtb
    echo aaa > ansible/password.txt
    docker exec sonic-mgmt bash -c "pushd /data/sonic-mgmt/ansible;./testbed-cli.sh -d /data/sonic-vm -m $(inventory) -t $(testbed_file) -k ceos refresh-dut ${{ parameters.tbname }} password.txt" && sleep 180
  displayName: "Setup testbed"

- script: |
    rm -rf $(Build.ArtifactStagingDirectory)/*
    docker exec sonic-mgmt bash -c "/data/sonic-mgmt/tests/kvmtest.sh -en -T ${{ parameters.tbtype }} ${{ parameters.tbname }} ${{ parameters.dut }}"
  displayName: "Run tests"

- script: |
    # save dut state if test fails
    virsh_version=$(virsh --version)
    if [ $virsh_version == "6.0.0" ]; then
        mkdir -p $(Build.ArtifactStagingDirectory)/kvmdump
        virsh -c qemu:///system list
        virsh -c qemu:///system save ${{ parameters.dut }} $(Build.ArtifactStagingDirectory)/kvmdump/${{ parameters.dut }}.memdmp
        virsh -c qemu:///system dumpxml ${{ parameters.dut }} > $(Build.ArtifactStagingDirectory)/kvmdump/${{ parameters.dut }}.xml
        img=$(virsh -c qemu:///system domblklist ${{ parameters.dut }} | grep vda | awk '{print $2}')
        cp $img $(Build.ArtifactStagingDirectory)/kvmdump/${{ parameters.dut }}.img
        virsh -c qemu:///system undefine ${{ parameters.dut }}
    fi

    docker commit ${{ parameters.ptf_name }} docker-ptf:$(Build.BuildNumber)
    docker save docker-ptf:$(Build.BuildNumber) | gzip -c > $(Build.ArtifactStagingDirectory)/kvmdump/docker-ptf-dump.gz
    docker rmi docker-ptf:$(Build.BuildNumber)
  displayName: "Collect kvmdump"
  condition: failed()

- script: |
    cp -r /data/sonic-mgmt/tests/logs $(Build.ArtifactStagingDirectory)/
    username=$(id -un)
    sudo chown -R $username.$username $(Build.ArtifactStagingDirectory)
  displayName: "Collect test logs"
  condition: succeededOrFailed()

- publish: $(Build.ArtifactStagingDirectory)/kvmdump
  artifact: sonic-buildimage.kvmtest.${{ parameters.tbtype}}.memdump@$(System.JobAttempt)
  displayName: "Archive sonic kvm memdump"
  condition: failed()

- publish: $(Build.ArtifactStagingDirectory)/logs
  artifact: sonic-buildimage.kvmtest.${{ parameters.tbtype }}.log@$(System.JobAttempt)
  displayName: "Archive sonic kvm logs"
  condition: succeededOrFailed()

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/logs/**/*.xml'
    testRunTitle: kvmtest.${{ parameters.tbtype }}
  condition: succeededOrFailed()
